"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils = require("tns-core-modules/utils/utils");
var remoteVideo_1 = require("./remoteVideo");
var localVideo_1 = require("./localVideo");
var observable_1 = require("tns-core-modules/data/observable");
var app = require("application");
var AudioManager = android.media.AudioManager;
var LocalParticipant = com.twilio.video.LocalParticipant;
var RoomState = com.twilio.video.RoomState;
var Video = com.twilio.video.Video;
var VideoRenderer = com.twilio.video.VideoRenderer;
var TwilioException = com.twilio.video.TwilioException;
var AudioTrack = com.twilio.video.AudioTrack;
var CameraCapturer = com.twilio.video.CameraCapturer;
var ConnectOptions = com.twilio.video.ConnectOptions;
var LocalAudioTrack = com.twilio.video.LocalAudioTrack;
var LocalVideoTrack = com.twilio.video.LocalVideoTrack;
var Participant = com.twilio.video.Participant;
var Room = com.twilio.video.Room;
var VideoTrack = com.twilio.video.VideoTrack;
var VideoActivity = (function () {
    function VideoActivity() {
        var localVideo = new localVideo_1.LocalVideo();
        var remoteVideo = new remoteVideo_1.RemoteVideo();
        this.localVideoView = localVideo.get_local_view();
        this.remoteVideoView = remoteVideo.get_remote_view();
        this.audioManager = app.android.context.getSystemService(android.content.Context.AUDIO_SERVICE);
    }
    VideoActivity.prototype.createAudioAndVideoTracks = function () {
        if (this.localVideoTrack)
            return;
        this.localVideoView.setMirror(true);
        this.localAudioTrack = LocalAudioTrack.create(utils.ad.getApplicationContext(), true);
        this.cameraCapturer = new CameraCapturer(utils.ad.getApplicationContext(), CameraCapturer.CameraSource.FRONT_CAMERA);
        this.localVideoTrack = LocalVideoTrack.create(utils.ad.getApplicationContext(), true, this.cameraCapturer);
        this.localVideoTrack.addRenderer(this.localVideoView);
    };
    VideoActivity.prototype.toggle_local_video = function () {
        if (this.localVideoTrack) {
            var enable = !this.localVideoTrack.isEnabled();
            this.localVideoTrack.enable(enable);
        }
    };
    VideoActivity.prototype.toggle_local_audio = function () {
        if (this.localAudioTrack) {
            var enabled = !this.localAudioTrack.isEnabled();
            this.localAudioTrack(enabled);
        }
    };
    VideoActivity.prototype.destroy_local_video = function () {
        this.localVideoTrack.removeRenderer(this.localVideoView);
        this.localVideoTrack = null;
    };
    VideoActivity.prototype.destroy_local_audio = function () {
        this.localVideoTrack.removeRenderer(this.localVideoView);
        this.localVideoTrack = null;
    };
    VideoActivity.prototype.connect_to_room = function (roomName) {
        this.configureAudio(true);
        var connectOptionsBuilder = new ConnectOptions.Builder(this.accessToken).roomName(roomName);
        if (this.localAudioTrack !== null) {
            connectOptionsBuilder.audioTracks(java.util.Collections.singletonList(this.localAudioTrack));
        }
        if (this.localVideoTrack !== null) {
            connectOptionsBuilder.videoTracks(java.util.Collections.singletonList(this.localVideoTrack));
        }
        this.room = Video.connect(utils.ad.getApplicationContext(), connectOptionsBuilder.build(), this.roomListener());
    };
    VideoActivity.prototype.set_access_token = function (token, name) {
        this.accessToken = token;
        this.name = name;
    };
    VideoActivity.prototype.disconnect_from_room = function () {
        if (!this.localParticipant)
            return;
        this.localParticipant.removeVideoTrack(this.localVideoTrack);
        this.localParticipant = null;
        this.localVideoTrack.release();
        this.localVideoTrack = null;
    };
    VideoActivity.prototype.roomListener = function () {
        var self = this;
        var that = new WeakRef(this);
        self.videoEvent = new observable_1.Observable();
        return new Room.Listener({
            onConnected: function (room) {
                var owner = that.get();
                var list = room.getParticipants();
                console.log('owner below');
                console.dir(owner);
                console.log('this: ', this);
                self.localParticipant = room.getLocalParticipant();
                for (var i = 0, l = list.size(); i < l; i++) {
                    var participant = list.get(i);
                    self.addParticipant(participant);
                }
                console.log("onConnected: ", self.name);
                if (self.videoEvent) {
                    self.videoEvent.notify({
                        eventName: 'onConnected',
                        object: observable_1.fromObject({
                            room: room
                        })
                    });
                }
            },
            onConnectFailure: function (room, error) {
                console.log("failed to connect");
                console.log(error);
                self.configureAudio(false);
            },
            onDisconnected: function (room, error) {
                console.log("Disconnected from " + room.getName());
                self.room = null;
                self.configureAudio(false);
            },
            onParticipantConnected: function (room, participant) {
                console.log(self.name, ' participant added');
                self.addParticipant(participant);
            },
            onParticipantDisconnected: function (room, participant) {
                console.log('participant removed');
                self.removeParticipant(participant);
            },
            onRecordingStarted: function (room) {
                console.log('onRecordingStarted');
            },
            onRecordingStopped: function (room) {
                console.log('onRecordingStopped');
            }
        });
    };
    VideoActivity.prototype.participant_listener = function () {
        var self = this;
        return new Participant.Listener({
            onAudioTrackAdded: function (participant, audioTrack) {
                console.log('onAudioTrackAdded');
            },
            onAudioTrackRemoved: function (participant, audioTrack) {
                console.log('onAudioTrackRemoved');
            },
            onVideoTrackAdded: function (participant, videoTrack) {
                console.log(self.name, ' onVideoTrackAdded');
                self.addParticipantVideo(videoTrack);
            },
            onVideoTrackRemoved: function (participant, VideoTrack) {
                console.log('onVideoTrackRemoved');
            },
            onAudioTrackEnabled: function (participant, AudioTrack) {
            },
            onAudioTrackDisabled: function (participant, AudioTrack) {
            },
            onVideoTrackEnabled: function (participant, VideoTrack) {
                console.log('onVideoTrackEnabled');
            },
            onVideoTrackDisabled: function (participant, VideoTrack) {
            }
        });
    };
    VideoActivity.prototype.addParticipant = function (participant) {
        console.log('279: ');
        console.log(typeof participant);
        if (participant.getVideoTracks().size() > 0) {
            console.log(this.name, ' found video tracks');
            this.addParticipantVideo(participant.getVideoTracks().get(0));
        }
        participant.setListener(this.participant_listener());
    };
    VideoActivity.prototype.addParticipantVideo = function (videoTrack) {
        console.log(this.name, ' added video track: ', videoTrack);
        console.log(this.name, ' remote video view: ', this.remoteVideoView);
        this.localVideoView.setMirror(false);
        videoTrack.addRenderer(this.remoteVideoView);
    };
    VideoActivity.prototype.removeParticipant = function (participant) {
        console.log("Participant " + participant.getIdentity() + " left.");
        if (participant.getVideoTracks().size() > 0) {
            this.removeParticipantVideo(participant.getVideoTracks().get(0));
        }
        participant.setListener(null);
    };
    VideoActivity.prototype.removeParticipantVideo = function (videoTrack) {
        console.log('removeParticipantVideo was called');
        videoTrack.removeRenderer(this.remoteVideoView);
    };
    VideoActivity.prototype.configureAudio = function (enable) {
        if (enable) {
            this.previousAudioMode = this.audioManager.getMode();
            this.audioManager.requestAudioFocus(null, AudioManager.STREAM_VOICE_CALL, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);
            this.audioManager.setMode(AudioManager.MODE_IN_COMMUNICATION);
            this.previousMicrophoneMute = this.audioManager.isMicrophoneMute();
            this.audioManager.setMicrophoneMute(false);
        }
        else {
            this.audioManager.setMode(this.previousAudioMode);
            this.audioManager.abandonAudioFocus(null);
            this.audioManager.setMicrophoneMute(this.previousMicrophoneMute);
        }
    };
    return VideoActivity;
}());
exports.VideoActivity = VideoActivity;
//# sourceMappingURL=data:application/json;base64,