"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var delegates_1 = require("./delegates");
var VideoActivity = (function () {
    function VideoActivity() {
        this._cameraCapturerDelegate = delegates_1.CameraCapturerDelegate.initWithOwner(new WeakRef(this));
        this._roomDelegate = delegates_1.RoomDelegate.initWithOwner(new WeakRef(this));
        this._participantDelegate = delegates_1.ParticipantDelegate.initWithOwner(new WeakRef(this));
    }
    VideoActivity.prototype.connect_to_room = function (roomName) {
        var _this = this;
        if (!this.accessToken)
            return;
        var connectOptions = TVIConnectOptions.optionsWithTokenBlock(this.accessToken, function (builder) {
            builder.audioTracks = [_this.localAudioTrack];
            builder.videoTracks = [_this.localVideoTrack];
            builder.roomName = roomName;
            return builder;
        });
        this.roomObj = TwilioVideo.connectWithOptionsDelegate(connectOptions, this._roomDelegate);
    };
    VideoActivity.prototype.createAudioAndVideoTracks = function () {
        this.cameraCapturer = TVICameraCapturer.alloc().init().initWithSourceDelegate(TVICameraCaptureSourceFrontCamera, this._cameraCapturerDelegate);
        this.localVideoTrack = TVILocalVideoTrack.trackWithCapturer(this.cameraCapturer);
        this.localVideoTrack.addRenderer(this.localVideoView);
        this.localVideoView.mirror = true;
        this.configure_audio(true);
    };
    VideoActivity.prototype.configure_audio = function (enable) {
        if (!this.localAudioTrack) {
            this.localAudioTrack = TVILocalAudioTrack.track();
            if (!this.localAudioTrack) {
                return 'failed to get local audio';
            }
        }
    };
    VideoActivity.prototype.removeParticipantVideo = function (participant) {
        if (participant) {
            if (participant.videoTracks.count > 0) {
                participant.videoTracks[0].removeRenderer(this.remoteVideoView);
                this.remoteVideoView.removeFromSuperview();
            }
            participant = null;
            this.participant = null;
        }
    };
    VideoActivity.prototype.set_listener_for_participants = function (room) {
        if (room.participants.count > 0) {
            var participant = room.participants[0];
            participant.delegate = this._participantDelegate;
        }
    };
    VideoActivity.prototype.participant_joined_room = function (participant) {
        if (!this.participant) {
            this.participant = participant;
            this.participant.delegate = this._participantDelegate;
        }
    };
    VideoActivity.prototype.add_video_track = function (videoTrack) {
        videoTrack.addRenderer(this.remoteVideoView);
    };
    VideoActivity.prototype.removeParticipant = function (participant) {
        if (participant.videoTracks.count > 0) {
            participant.videoTracks[0].removeRenderer(this.remoteVideoView);
        }
        participant = null;
        this.participant = null;
    };
    VideoActivity.prototype.set_access_token = function (token) {
        this.accessToken = token;
    };
    VideoActivity.prototype.toggle_local_video = function () {
        if (this.localVideoTrack) {
            this.localVideoTrack.enabled = !this.localVideoTrack.enabled;
        }
    };
    VideoActivity.prototype.toggle_local_audio = function () {
        if (this.localAudioTrack) {
            this.localAudioTrack.enabled = !this.localAudioTrack.enabled;
        }
    };
    VideoActivity.prototype.destroy_local_video = function () {
        this.localVideoTrack.removeRenderer(this.localVideoView);
    };
    Object.defineProperty(VideoActivity.prototype, "events", {
        get: function () {
            return delegates_1.DelegateEvents._events;
        },
        enumerable: true,
        configurable: true
    });
    return VideoActivity;
}());
exports.VideoActivity = VideoActivity;
//# sourceMappingURL=data:application/json;base64,