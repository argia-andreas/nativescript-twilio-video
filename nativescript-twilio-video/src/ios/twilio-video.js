"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var delegates_1 = require("./delegates");
var VideoActivity = (function () {
    function VideoActivity() {
        this._roomDelegate = delegates_1.RoomDelegate.initWithOwner(new WeakRef(this), this);
        this._participantDelegate = delegates_1.RemoteParticipantDelegate.initWithOwner(new WeakRef(this), this);
    }
    VideoActivity.prototype.startPreview = function () {
        this.camera = TVICameraCapturer.alloc().initWithSource(TVICameraCaptureSourceFrontCamera);
        this.localVideoTrack = TVILocalVideoTrack.trackWithCapturer(this.camera);
        if (!this.localVideoTrack) {
            this.notify('Failed to add video track');
        }
        else {
            this.localVideoTrack.addRenderer(this.localVideoView);
        }
    };
    VideoActivity.prototype.disconnect = function () {
        this.room.disconnect();
    };
    VideoActivity.prototype.prepareLocalMedia = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!_this.localAudioTrack) {
                _this.localAudioTrack = TVILocalAudioTrack.track();
                if (!_this.localAudioTrack) {
                    _this.notify("Failed to add audio track");
                    reject("Failed to add audio track");
                    return;
                }
            }
            if (!_this.localVideoTrack) {
                _this.startPreview();
            }
            resolve();
        });
    };
    VideoActivity.prototype.toggle_local_video = function () {
        if (this.localVideoTrack) {
            this.localVideoTrack.enabled = !this.localVideoTrack.enable;
        }
    };
    VideoActivity.prototype.toggle_local_audio = function () {
        if (this.localAudioTrack) {
            this.localAudioTrack.enabled = !this.localAudioTrack.enabled;
        }
    };
    VideoActivity.prototype.connect_to_room = function (room) {
        var _this = this;
        if (!this.accessToken) {
            this.notify('Please provide a valid token to connect to a room');
            return;
        }
        this.prepareLocalMedia();
        var connectOptions = TVIConnectOptions.optionsWithTokenBlock(this.accessToken, function (builder) {
            builder.audioTracks = [_this.localAudioTrack];
            builder.videoTracks = [_this.localVideoTrack];
            builder.roomName = room;
        });
        this.room = TwilioVideo.connectWithOptionsDelegate(connectOptions, this._roomDelegate);
    };
    VideoActivity.prototype.cleanupRemoteParticipant = function () {
        if (this.remoteParticipants && this.remoteParticipants.videoTracks.count > 0) {
            this.videoTrack.removeRenderer(this.remoteVideoView);
            this.remoteVideoView.removeFromSuperview();
            this.remoteParticipants = undefined;
        }
    };
    VideoActivity.prototype.notify = function (reason) {
        this.event.notify({
            eventName: 'error',
            object: observable_1.fromObject({
                reason: reason
            })
        });
    };
    VideoActivity.prototype.connectToRoomWithListener = function (room) {
        if (room.remoteParticipants.count > 0) {
            this.remoteParticipants = room.remoteParticipants[0];
            this.remoteParticipants.delegate = this._participantDelegate;
        }
    };
    VideoActivity.prototype.participant_joined_room = function (participant) {
        if (!this.remoteParticipants) {
            this.remoteParticipants = participant;
            this.remoteParticipants.delegate = this._participantDelegate;
        }
    };
    VideoActivity.prototype.set_access_token = function (token) {
        this.accessToken = token;
    };
    VideoActivity.prototype.add_video_track = function (videoTrack) {
        videoTrack.addRenderer(this.remoteVideoView);
    };
    VideoActivity.prototype.destroy_local_video = function () {
        this.localVideoTrack.removeRenderer(this.localVideoView);
    };
    VideoActivity.prototype.configure_audio = function (enable) {
        if (!this.localAudioTrack) {
            this.localAudioTrack = TVILocalAudioTrack.track();
            if (!this.localAudioTrack) {
                return 'failed to get local audio';
            }
        }
    };
    Object.defineProperty(VideoActivity.prototype, "event", {
        get: function () {
            return delegates_1.DelegateEvents._event;
        },
        enumerable: true,
        configurable: true
    });
    return VideoActivity;
}());
exports.VideoActivity = VideoActivity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdpbGlvLXZpZGVvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHdpbGlvLXZpZGVvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsK0RBQTBFO0FBRTFFLHlDQUE4RztBQWU5RztJQXVCSTtRQU1JLElBQUksQ0FBQyxhQUFhLEdBQUcsd0JBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFekUsSUFBSSxDQUFDLG9CQUFvQixHQUFHLHFDQUF5QixDQUFDLGFBQWEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVqRyxDQUFDO0lBc0JELG9DQUFZLEdBQVo7UUFHSSxJQUFJLENBQUMsTUFBTSxHQUFHLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDLGNBQWMsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1FBRTFGLElBQUksQ0FBQyxlQUFlLEdBQUcsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXpFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7WUFFeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBRTdDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUVKLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUUxRCxDQUFDO0lBRUwsQ0FBQztJQUVELGtDQUFVLEdBQVY7UUFFSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRTNCLENBQUM7SUFFRCx5Q0FBaUIsR0FBakI7UUFBQSxpQkFnQ0M7UUE3QkcsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFFL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxL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QUFNLENBQUMsMEJBQWMsQ0FBQyxNQUFNLENBQUM7UUFFakMsQ0FBQzs7O09BQUE7SUFLTCxvQkFBQztBQUFELENBQUMsQUFyU0QsSUFxU0M7QUFyU1ksc0NBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFJlbW90ZVZpZGVvIH0gZnJvbSBcIi4vcmVtb3RlVmlkZW9cIjtcbmltcG9ydCB7IExvY2FsVmlkZW8gfSBmcm9tIFwiLi9sb2NhbFZpZGVvXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tT2JqZWN0IH0gZnJvbSAndG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgVmlkZW9BY3Rpdml0eUJhc2UgfSBmcm9tIFwiLi4vdHdpbGlvLWNvbW1vblwiO1xuaW1wb3J0IHsgUm9vbURlbGVnYXRlLCBSZW1vdGVQYXJ0aWNpcGFudERlbGVnYXRlLCBEZWxlZ2F0ZUV2ZW50cywgQ2FtZXJhQ2FwdHVyZXJEZWxlZ2F0ZSB9IGZyb20gXCIuL2RlbGVnYXRlc1wiO1xuaW1wb3J0ICogYXMgYXBwbGljYXRpb24gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvYXBwbGljYXRpb25cIjtcblxuZGVjbGFyZSB2YXIgVFZJQ29ubmVjdE9wdGlvbnMsXG4gICAgICAgICAgICBUVklDYW1lcmFDYXB0dXJlcixcbiAgICAgICAgICAgIFRWSUxvY2FsVmlkZW9UcmFjayxcbiAgICAgICAgICAgIFRWSVJlbW90ZVBhcnRpY2lwYW50LFxuICAgICAgICAgICAgVHdpbGlvVmlkZW8sXG4gICAgICAgICAgICBUVklMb2NhbEF1ZGlvVHJhY2ssXG4gICAgICAgICAgICBUVklSb29tLFxuICAgICAgICAgICAgVFZJVmlkZW9WaWV3LFxuICAgICAgICAgICAgVFZJUmVtb3RlVmlkZW9UcmFjayxcbiAgICAgICAgICAgIFRWSUNhbWVyYUNhcHR1cmVTb3VyY2VGcm9udENhbWVyYTtcblxuXG5leHBvcnQgY2xhc3MgVmlkZW9BY3Rpdml0eSB7XG5cbiAgICBsb2NhbFZpZGVvVmlldzogYW55O1xuICAgIHJlbW90ZVZpZGVvVmlldzogYW55O1xuICAgIGxvY2FsVmlkZW9UcmFjazogYW55O1xuICAgIGxvY2FsQXVkaW9UcmFjazogYW55O1xuICAgIGNhbWVyYUNhcHR1cmVyOiBhbnk7XG4gICAgX2NhbWVyYUNhcHR1cmVyRGVsZWdhdGU6IGFueTtcbiAgICBhY2Nlc3NUb2tlbjogc3RyaW5nO1xuICAgIHJvb21PYmo6IGFueTtcbiAgICBwcmV2aW91c01pY3JvcGhvbmVNdXRlOiBib29sZWFuO1xuICAgIGxvY2FsUGFydGljaXBhbnQ6IGFueTtcbiAgICByZW1vdGVQYXJ0aWNpcGFudHM6IGFueTtcbiAgICBfcm9vbUxpc3RlbmVyOiBhbnk7XG4gICAgX3BhcnRpY2lwYW50RGVsZWdhdGU6IGFueTtcbiAgICBfcm9vbURlbGVnYXRlOiBhbnk7XG4gICAgcGFydGljaXBhbnQ6IGFueTtcbiAgICB2aWRlb1RyYWNrOiBhbnk7XG4gICAgLy8gZXZlbnQ6IE9ic2VydmFibGU7XG4gICAgcm9vbTogYW55O1xuICAgIGNhbWVyYTogYW55O1xuICAgIHRlc3Q6IHN0cmluZztcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHsgXG5cbiAgICAgICAgLy8gdGhpcy5ldmVudCA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIFxuICAgICAgICAvLyB0aGlzLl9jYW1lcmFDYXB0dXJlckRlbGVnYXRlID0gQ2FtZXJhQ2FwdHVyZXJEZWxlZ2F0ZS5pbml0V2l0aE93bmVyKG5ldyBXZWFrUmVmKHRoaXMpKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3Jvb21EZWxlZ2F0ZSA9IFJvb21EZWxlZ2F0ZS5pbml0V2l0aE93bmVyKG5ldyBXZWFrUmVmKHRoaXMpLCB0aGlzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3BhcnRpY2lwYW50RGVsZWdhdGUgPSBSZW1vdGVQYXJ0aWNpcGFudERlbGVnYXRlLmluaXRXaXRoT3duZXIobmV3IFdlYWtSZWYodGhpcyksIHRoaXMpOyAgICAgIFxuXG4gICAgfVxuXG4gICAgLy8gcHVibGljIHJlbW92ZV92aWRlb19jaGF0X3R3aWxpb19saXN0ZW5lcnMoKTogdm9pZCB7XG5cbiAgICAvLyAgICAgdGhpcy5ldmVudC5vZmYoJ29uQ29ubmVjdGVkJyk7XG4gICAgLy8gICAgIHRoaXMuZXZlbnQub2ZmKCdvblBhcnRpY2lwYW50Q29ubmVjdGVkJyk7XG4gICAgLy8gICAgIHRoaXMuZXZlbnQub2ZmKCdvblZpZGVvVHJhY2tBZGRlZCcpO1xuICAgIC8vICAgICB0aGlzLmV2ZW50Lm9mZignb25EaXNjb25uZWN0ZWQnKTtcbiAgICAvLyAgICAgdGhpcy5ldmVudC5vZmYoJ29uQ29ubmVjdEZhaWx1cmUnKTtcbiAgICAvLyAgICAgdGhpcy5ldmVudC5vZmYoJ29uUGFydGljaXBhbnREaXNjb25uZWN0ZWQnKTtcbiAgICAvLyAgICAgdGhpcy5ldmVudC5vZmYoJ29uQXVkaW9UcmFja0FkZGVkJyk7XG4gICAgLy8gICAgIHRoaXMuZXZlbnQub2ZmKCdvblZpZGVvVHJhY2tSZW1vdmVkJyk7XG4gICAgLy8gICAgIHRoaXMuZXZlbnQub2ZmKCdvbkF1ZGlvVHJhY2tFbmFibGVkJyk7XG4gICAgLy8gICAgIHRoaXMuZXZlbnQub2ZmKCdvbkF1ZGlvVHJhY2tEaXNhYmxlZCcpO1xuICAgIC8vICAgICB0aGlzLmV2ZW50Lm9mZignb25WaWRlb1RyYWNrRW5hYmxlZCcpO1xuICAgIC8vICAgICB0aGlzLmV2ZW50Lm9mZignb25WaWRlb1RyYWNrRGlzYWJsZWQnKTtcbiAgICAvLyAgICAgdGhpcy5ldmVudC5vZmYoJ3N1YnNjcmliZWRUb1ZpZGVvVHJhY2tQdWJsaWNhdGlvbkZvclBhcnRpY2lwYW50Jyk7XG4gICAgLy8gICAgIHRoaXMuZXZlbnQub2ZmKCd1bnN1YnNjcmliZWRGcm9tVmlkZW9UcmFja1B1YmxpY2F0aW9uRm9yUGFydGljaXBhbnQnKTtcbiAgICAvLyB9XG5cblxuXG4gICAgc3RhcnRQcmV2aWV3KCkge1xuICAgICAgICAvLyBUVklDYW1lcmFDYXB0dXJlciBpcyBub3Qgc3VwcG9ydGVkIHdpdGggdGhlIFNpbXVsYXRvci5cbiAgICAgICAgLy8gdGhpcy5jYW1lcmEgPSBUVklDYW1lcmFDYXB0dXJlci5hbGxvYygpLmluaXRXaXRoU291cmNlRGVsZWdhdGUoVFZJQ2FtZXJhQ2FwdHVyZVNvdXJjZUZyb250Q2FtZXJhLCB0aGlzLl9jYW1lcmFDYXB0dXJlckRlbGVnYXRlKTtcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBUVklDYW1lcmFDYXB0dXJlci5hbGxvYygpLmluaXRXaXRoU291cmNlKFRWSUNhbWVyYUNhcHR1cmVTb3VyY2VGcm9udENhbWVyYSk7XG5cbiAgICAgICAgdGhpcy5sb2NhbFZpZGVvVHJhY2sgPSBUVklMb2NhbFZpZGVvVHJhY2sudHJhY2tXaXRoQ2FwdHVyZXIodGhpcy5jYW1lcmEpO1xuXG4gICAgICAgIGlmICghdGhpcy5sb2NhbFZpZGVvVHJhY2spIHtcblxuICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ0ZhaWxlZCB0byBhZGQgdmlkZW8gdHJhY2snKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQWRkIHJlbmRlcmVyIHRvIHZpZGVvIHRyYWNrIGZvciBsb2NhbCBwcmV2aWV3XG4gICAgICAgICAgICB0aGlzLmxvY2FsVmlkZW9UcmFjay5hZGRSZW5kZXJlcih0aGlzLmxvY2FsVmlkZW9WaWV3KTtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5yb29tLmRpc2Nvbm5lY3QoKTtcblxuICAgIH1cblxuICAgIHByZXBhcmVMb2NhbE1lZGlhKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIC8vIFdlIHdpbGwgc2hhcmUgbG9jYWwgYXVkaW8gYW5kIHZpZGVvIHdoZW4gd2UgY29ubmVjdCB0byByb29tLlxuICAgICAgICAvLyBDcmVhdGUgYW4gYXVkaW8gdHJhY2suXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKCF0aGlzLmxvY2FsQXVkaW9UcmFjaykge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbEF1ZGlvVHJhY2sgPSBUVklMb2NhbEF1ZGlvVHJhY2sudHJhY2soKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubG9jYWxBdWRpb1RyYWNrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoXCJGYWlsZWQgdG8gYWRkIGF1ZGlvIHRyYWNrXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcIkZhaWxlZCB0byBhZGQgYXVkaW8gdHJhY2tcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIHZpZGVvIHRyYWNrIHdoaWNoIGNhcHR1cmVzIGZyb20gdGhlIGNhbWVyYS5cbiAgICAgICAgICAgIGlmICghdGhpcy5sb2NhbFZpZGVvVHJhY2spIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRQcmV2aWV3KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc29sdmUoKTtcblxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVfbG9jYWxfdmlkZW8oKSB7XG5cbiAgICAgICAgaWYgKHRoaXMubG9jYWxWaWRlb1RyYWNrKSB7XG5cbiAgICAgICAgICAgIHRoaXMubG9jYWxWaWRlb1RyYWNrLmVuYWJsZWQgPSAhdGhpcy5sb2NhbFZpZGVvVHJhY2suZW5hYmxlO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVfbG9jYWxfYXVkaW8oKSB7XG5cbiAgICAgICAgaWYgKHRoaXMubG9jYWxBdWRpb1RyYWNrKSB7XG5cbiAgICAgICAgICAgIHRoaXMubG9jYWxBdWRpb1RyYWNrLmVuYWJsZWQgPSAhdGhpcy5sb2NhbEF1ZGlvVHJhY2suZW5hYmxlZDtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBjb25uZWN0X3RvX3Jvb20ocm9vbTogc3RyaW5nKTogdm9pZCB7XG5cbiAgICAgICAgaWYgKCAhdGhpcy5hY2Nlc3NUb2tlbiApIHtcblxuICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ1BsZWFzZSBwcm92aWRlIGEgdmFsaWQgdG9rZW4gdG8gY29ubmVjdCB0byBhIHJvb20nKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzLnJvb20gPSByb29tO1xuXG4gICAgICAgIC8vIFByZXBhcmUgbG9jYWwgbWVkaWEgd2hpY2ggd2Ugd2lsbCBzaGFyZSB3aXRoIFJvb20gUGFydGljaXBhbnRzLlxuICAgICAgICB0aGlzLnByZXBhcmVMb2NhbE1lZGlhKCk7XG5cbiAgICAgICAgdmFyIGNvbm5lY3RPcHRpb25zID0gVFZJQ29ubmVjdE9wdGlvbnMub3B0aW9uc1dpdGhUb2tlbkJsb2NrKHRoaXMuYWNjZXNzVG9rZW4sIChidWlsZGVyKSA9PiB7XG5cblxuICAgICAgICAgICAgLy8gVXNlIHRoZSBsb2NhbCBtZWRpYSB0aGF0IHdlIHByZXBhcmVkIGVhcmxpZXIuXG5cbiAgICAgICAgICAgIGJ1aWxkZXIuYXVkaW9UcmFja3MgPSBbIHRoaXMubG9jYWxBdWRpb1RyYWNrIF07XG5cbiAgICAgICAgICAgIGJ1aWxkZXIudmlkZW9UcmFja3MgPSBbIHRoaXMubG9jYWxWaWRlb1RyYWNrIF07XG5cbiAgICAgICAgICAgIC8vIFRoZSBuYW1lIG9mIHRoZSBSb29tIHdoZXJlIHRoZSBDbGllbnQgd2lsbCBhdHRlbXB0IHRvIGNvbm5lY3QgdG8uIFBsZWFzZSBub3RlIHRoYXQgaWYgeW91IHBhc3MgYW4gZW1wdHlcbiAgICAgICAgICAgIC8vIFJvb20gYG5hbWVgLCB0aGUgQ2xpZW50IHdpbGwgY3JlYXRlIG9uZSBmb3IgeW91LiBZb3UgY2FuIGdldCB0aGUgbmFtZSBvciBzaWQgZnJvbSBhbnkgY29ubmVjdGVkIFJvb20uXG4gICAgICAgICAgICBidWlsZGVyLnJvb21OYW1lID0gcm9vbTtcblxuXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgXG5cblxuICAgICAgICAvLyBDb25uZWN0IHRvIHRoZSBSb29tIHVzaW5nIHRoZSBvcHRpb25zIHdlIHByb3ZpZGVkLlxuICAgICAgICB0aGlzLnJvb20gPSBUd2lsaW9WaWRlby5jb25uZWN0V2l0aE9wdGlvbnNEZWxlZ2F0ZShjb25uZWN0T3B0aW9ucywgdGhpcy5fcm9vbURlbGVnYXRlKTtcblxuICAgICAgICAvLyBbc2VsZiBsb2dNZXNzYWdlOltOU1N0cmluZyBzdHJpbmdXaXRoRm9ybWF0OkBcIkF0dGVtcHRpbmcgdG8gY29ubmVjdCB0byByb29tICVAXCIsIHNlbGYucm9vbVRleHRGaWVsZC50ZXh0XV07XG5cbiAgICB9XG5cblxuICAgIGNsZWFudXBSZW1vdGVQYXJ0aWNpcGFudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVtb3RlUGFydGljaXBhbnRzICYmIHRoaXMucmVtb3RlUGFydGljaXBhbnRzLnZpZGVvVHJhY2tzLmNvdW50ID4gMCkge1xuICAgICAgICAgICAgdGhpcy52aWRlb1RyYWNrLnJlbW92ZVJlbmRlcmVyKHRoaXMucmVtb3RlVmlkZW9WaWV3KTtcbiAgICAgICAgICAgIHRoaXMucmVtb3RlVmlkZW9WaWV3LnJlbW92ZUZyb21TdXBlcnZpZXcoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3RlUGFydGljaXBhbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbm90aWZ5KHJlYXNvbjogc3RyaW5nKSB7XG5cbiAgICAgICAgdGhpcy5ldmVudC5ub3RpZnkoe1xuICAgICAgICAgICAgZXZlbnROYW1lOiAnZXJyb3InLFxuICAgICAgICAgICAgb2JqZWN0OiBmcm9tT2JqZWN0KHtcbiAgICAgICAgICAgICAgICByZWFzb246IHJlYXNvblxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBcblxuXG4gICAgcHVibGljIGNvbm5lY3RUb1Jvb21XaXRoTGlzdGVuZXIocm9vbSkgeyAvLyBydW5zIGZyb20gb25Db25uZWN0ZWQvZGlkQ29ubmVjdFRvUm9vbVxuXG4gICAgICAgIGlmIChyb29tLnJlbW90ZVBhcnRpY2lwYW50cy5jb3VudCA+IDApIHtcblxuICAgICAgICAgICAgdGhpcy5yZW1vdGVQYXJ0aWNpcGFudHMgPSByb29tLnJlbW90ZVBhcnRpY2lwYW50c1swXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5yZW1vdGVQYXJ0aWNpcGFudHMuZGVsZWdhdGUgPSB0aGlzLl9wYXJ0aWNpcGFudERlbGVnYXRlO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBwYXJ0aWNpcGFudF9qb2luZWRfcm9vbShwYXJ0aWNpcGFudCkge1xuXG4gICAgICAgIGlmICghdGhpcy5yZW1vdGVQYXJ0aWNpcGFudHMpIHtcblxuICAgICAgICAgICAgdGhpcy5yZW1vdGVQYXJ0aWNpcGFudHMgPSBwYXJ0aWNpcGFudDtcblxuICAgICAgICAgICAgdGhpcy5yZW1vdGVQYXJ0aWNpcGFudHMuZGVsZWdhdGUgPSB0aGlzLl9wYXJ0aWNpcGFudERlbGVnYXRlO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBzZXRfYWNjZXNzX3Rva2VuKHRva2VuOiBzdHJpbmcpIHtcblxuICAgICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gdG9rZW47XG5cbiAgICB9XG5cbiAgICAvLyBwdWJsaWMgcmVtb3ZlX3JlbW90ZV92aWV3KHZpZGVvVHJhY2ssIHBhcnRpY2lwYW50KTogdm9pZCB7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdyZW1vdmVfcmVtb3RlX3ZpZXcnKTtcbiAgICAvLyAgICAgaWYgKHRoaXMucmVtb3RlUGFydGljaXBhbnRzID09PSBwYXJ0aWNpcGFudCAmJiB0aGlzLnJlbW90ZVZpZGVvVmlldyAhPT0gbnVsbCkge1xuXG4gICAgLy8gICAgICAgICB0cnkge1xuXG4gICAgLy8gICAgICAgICAgICAgdmlkZW9UcmFjay5yZW1vdmVSZW5kZXJlcih0aGlzLnJlbW90ZVZpZGVvVmlldyk7XG5cbiAgICAvLyAgICAgICAgIH0gY2F0Y2goZSkge1xuXG4gICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG5cbiAgICAvLyAgICAgICAgICAgICB0aGlzLm5vdGlmeShlKTtcblxuICAgIC8vICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAvLyAgICAgICAgIC8vIHRoaXMucmVtb3RlVmlkZW9WaWV3LnJlbW92ZUZyb21TdXBlcnZpZXcoKTtcblxuICAgIC8vICAgICB9XG5cbiAgICAvLyB9XG5cbiAgICBwdWJsaWMgYWRkX3ZpZGVvX3RyYWNrKHZpZGVvVHJhY2spIHtcblxuICAgICAgICB2aWRlb1RyYWNrLmFkZFJlbmRlcmVyKHRoaXMucmVtb3RlVmlkZW9WaWV3KTtcblxuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95X2xvY2FsX3ZpZGVvKCkge1xuXG4gICAgICAgIHRoaXMubG9jYWxWaWRlb1RyYWNrLnJlbW92ZVJlbmRlcmVyKHRoaXMubG9jYWxWaWRlb1ZpZXcpO1xuXG4gICAgfVxuXG5cbiAgICBwdWJsaWMgY29uZmlndXJlX2F1ZGlvKGVuYWJsZTogYm9vbGVhbik6IGFueSB7XG5cbiAgICAgICAgLy8gV2Ugd2lsbCBzaGFyZSBsb2NhbCBhdWRpbyBhbmQgdmlkZW8gd2hlbiB3ZSBjb25uZWN0IHRvIHJvb20uXG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuIGF1ZGlvIHRyYWNrLlxuICAgICAgICBpZiAoIXRoaXMubG9jYWxBdWRpb1RyYWNrKSB7XG5cbiAgICAgICAgICAgIHRoaXMubG9jYWxBdWRpb1RyYWNrID0gVFZJTG9jYWxBdWRpb1RyYWNrLnRyYWNrKCk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5sb2NhbEF1ZGlvVHJhY2spIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiAnZmFpbGVkIHRvIGdldCBsb2NhbCBhdWRpbyc7XG5cbiAgICAgICAgICAgIH0gICAgICAgICBcblxuICAgICAgICB9IFxuXG4gICAgfVxuXG5cblxuICAgIGdldCBldmVudCgpOiBPYnNlcnZhYmxlIHtcblxuICAgICAgICByZXR1cm4gRGVsZWdhdGVFdmVudHMuX2V2ZW50O1xuXG4gICAgfVxuXG4gICAgXG5cblxufVxuXG4iXX0=