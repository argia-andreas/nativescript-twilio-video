"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var app = require("tns-core-modules/application");
var nativescript_twilio_video_1 = require("nativescript-twilio-video");
var dialogs = require("tns-core-modules/ui/dialogs");
var grid_layout_1 = require("tns-core-modules/ui/layouts/grid-layout");
var http = require("tns-core-modules/http");
var permissions = require('nativescript-permissions');
var timer = require("tns-core-modules/timer");
var VideoChat = (function (_super) {
    __extends(VideoChat, _super);
    function VideoChat(page) {
        var _this = _super.call(this) || this;
        _this.page = page;
        _this.nameEventsArray = [];
        _this.container = _this.page.getViewById('container');
        _this.videoActivity = new nativescript_twilio_video_1.VideoActivity();
        _this.localVideo = _this.page.getViewById('local-video');
        _this.remoteVideo = _this.page.getViewById('remote-video');
        _this.videoActivity.localVideoView = _this.localVideo.localVideoView;
        _this.videoActivity.remoteVideoView = _this.remoteVideo.remoteVideoView;
        console.log('is on android');
        if (app.android) {
            console.log('is on android');
            _this.set('name', 'android');
        }
        else {
            _this.set('name', 'ios');
        }
        _this.room = 'testing-room';
        _this.videoActivity.event.on('error', function (reason) {
            console.log('big error');
            console.log(reason.object['reason']);
            _this.nameEventsArray.push({ title: reason.object['reason'].toString() });
            console.log(JSON.stringify(reason.object['reason']));
        });
        _this.videoActivity.event.on('didConnectToRoom', function (r) {
            console.log("didConnectToRoom");
        });
        _this.videoActivity.event.on('didFailToConnectWithError', function (r) {
            console.log("didFailToConnectWithError");
        });
        _this.videoActivity.event.on('participantDidConnect', function (r) {
            console.log("participantDidConnect");
        });
        _this.videoActivity.event.on('participantDidDisconnect', function (r) {
            console.log("participantDidDisconnect");
        });
        _this.videoActivity.event.on('participantUnpublishedAudioTrack', function (r) {
            console.log("participantUnpublishedAudioTrack");
        });
        _this.videoActivity.event.on('participantPublishedVideoTrack', function (r) {
            console.log("participantPublishedVideoTrack");
        });
        _this.videoActivity.event.on('participantUnpublishedVideoTrack', function (r) {
            console.log("participantUnpublishedVideoTrack");
        });
        _this.videoActivity.event.on('onAudioTrackSubscribed', function (r) {
            console.log("onAudioTrackSubscribed");
        });
        _this.videoActivity.event.on('onAudioTrackUnsubscribed', function (r) {
            console.log("onAudioTrackUnsubscribed");
        });
        _this.videoActivity.event.on('onVideoTrackSubscribed', function (r) {
            console.log("onVideoTrackSubscribed");
        });
        _this.videoActivity.event.on('onVideoTrackUnsubscribed', function (r) {
            console.log("onVideoTrackUnsubscribed 00");
        });
        _this.videoActivity.event.on('participantDisabledVideoTrack', function (r) {
            console.log("participantDisabledVideoTrack");
        });
        _this.videoActivity.event.on('participantEnabledVideoTrack', function (r) {
            console.log("participantEnabledVideoTrack");
        });
        _this.videoActivity.event.on('participantDisabledAudioTrack', function (r) {
            console.log("participantDisabledAudioTrack");
        });
        _this.videoActivity.event.on('participantEnabledAudioTrack', function (r) {
            console.log("participantEnabledAudioTrack");
        });
        _this.get_permissions()
            .then(function () {
            var t = timer.setTimeout(function () {
                _this.videoActivity.start_preview();
                timer.clearTimeout(t);
            }, 1200);
        });
        return _this;
    }
    VideoChat.prototype.toggle_local_video_size = function () {
        if (this.localVideo.className === 'large') {
            this.localVideo.className = 'small';
            grid_layout_1.GridLayout.setColumn(this.localVideo, 1);
            grid_layout_1.GridLayout.setRow(this.localVideo, 0);
        }
        else {
            this.localVideo.className = 'large';
            grid_layout_1.GridLayout.setColumn(this.localVideo, 0);
            grid_layout_1.GridLayout.setColumnSpan(this.localVideo, 2);
            grid_layout_1.GridLayout.setRowSpan(this.localVideo, 2);
        }
    };
    VideoChat.prototype.add_video_views = function () {
        this.localVideo.className = 'large';
        this.remoteVideo.id = 'remote-video';
        this.localVideo.on('tap', this.toggle_local_video_size.bind(this));
        grid_layout_1.GridLayout.setColumnSpan(this.remoteVideo, 2);
        grid_layout_1.GridLayout.setRowSpan(this.remoteVideo, 2);
        grid_layout_1.GridLayout.setRow(this.remoteVideo, 0);
        grid_layout_1.GridLayout.setColumnSpan(this.localVideo, 2);
        grid_layout_1.GridLayout.setRowSpan(this.localVideo, 2);
        grid_layout_1.GridLayout.setRow(this.localVideo, 0);
        this.container.insertChild(this.remoteVideo, 0);
        this.container.insertChild(this.localVideo, 0);
    };
    VideoChat.prototype.check_permissions = function () {
        var audio, camera;
        if (app.android) {
            audio = permissions.hasPermission("android.permission.RECORD_AUDIO");
            camera = permissions.hasPermission("android.permission.CAMERA");
        }
        else {
            camera = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo);
            audio = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeAudio);
            if (camera < 3)
                camera = false;
            if (audio < 3)
                audio = false;
        }
        if (!audio || !camera)
            return false;
        else
            return true;
    };
    VideoChat.prototype.get_permissions = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var has_permissions = _this.check_permissions();
            if (has_permissions) {
                resolve();
                return;
            }
            if (app.android) {
                permissions.requestPermissions([
                    "android.permission.RECORD_AUDIO",
                    "android.permission.CAMERA"
                ], "I need these permissions because I'm cool")
                    .then(function (response) {
                    console.dir(response);
                    resolve(response);
                })
                    .catch(function (e) {
                    console.dir(e);
                    console.log("Uh oh, no permissions - plan B time!");
                    var has_permissions = _this.check_permissions();
                    if (!has_permissions) {
                        dialogs.alert("without mic and camera permissions \n you cannot connect. \n please allow permissions in settings and try again.").then(function () {
                        });
                    }
                });
            }
            else {
                Promise.all([_this.ios_mic_permission(), _this.ios_camera_permission()])
                    .then(function (values) {
                    console.log(JSON.stringify(values));
                    resolve();
                }, function (reason) {
                    console.log(JSON.stringify(reason));
                    _this.set('error', reason);
                    dialogs.alert("without mic and camera permissions \n you cannot connect. \n please allow permissions in settings and try again.").then(function () {
                        UIApplication.sharedApplication.openURL(NSURL.URLWithString(UIApplicationOpenSettingsURLString));
                    });
                    reject();
                });
            }
        });
    };
    VideoChat.prototype.ios_mic_permission = function () {
        return new Promise(function (resolve, reject) {
            var has_asked = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeAudio);
            if (has_asked === 2) {
                reject('mic permission denied');
                return;
            }
            AVAudioSession.sharedInstance().requestRecordPermission(function (bool) {
                if (bool === true) {
                    resolve(bool);
                    return;
                }
                reject('mic permission denied');
            });
        });
    };
    VideoChat.prototype.ios_camera_permission = function () {
        return new Promise(function (resolve, reject) {
            var has_asked = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo);
            if (has_asked === 2) {
                reject('camera permission denied');
                return;
            }
            AVCaptureDevice.requestAccessForMediaTypeCompletionHandler(AVMediaTypeVideo, function (bool) {
                if (bool === true) {
                    resolve(bool);
                    return;
                }
                reject('camera permission denied');
            });
        });
    };
    VideoChat.prototype.disconnect = function () {
        console.log('diconnect');
        console.log(this.videoActivity.room);
        if (this.videoActivity.room) {
            this.videoActivity.disconnect();
        }
    };
    VideoChat.prototype.toggle_local_audio = function () {
        this.videoActivity.toggle_local_audio();
    };
    VideoChat.prototype.toggle_local_video = function () {
        this.videoActivity.toggle_local_video();
    };
    VideoChat.prototype.connect_to_room = function () {
        var _this = this;
        if (!this.get('name') || !this.get('room') || this.get('name').length < 1 || this.get('room').length < 1)
            return this.set('error', "Missing Info.");
        else
            this.set('error', "");
        this.get_token()
            .then(function (result) {
            var result = result.content.toJSON();
            console.log(result);
            if (result['message']) {
                _this.set('error', result['message']);
                return;
            }
            console.log(_this.videoActivity.room);
            _this.videoActivity.set_access_token(result['twilioToken']);
            _this.videoActivity.connect_to_room(_this.get('room'), { video: true, audio: true });
            console.log(_this.videoActivity.room);
        }, function (e) {
            _this.set('error', e);
        });
    };
    VideoChat.prototype.get_token = function () {
        var name = this.get('name');
        return http.request({
            url: 'https://9e828d6e.ngrok.io/twilioToken',
            method: "POST",
            headers: { "Content-Type": "application/json" },
            content: JSON.stringify({ uid: name })
        });
    };
    return VideoChat;
}(observable_1.Observable));
exports.VideoChat = VideoChat;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi12aWV3LW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi12aWV3LW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQTBFO0FBRTFFLGtEQUFvRDtBQUNwRCx1RUFBbUY7QUFDbkYscURBQXVEO0FBRXZELHVFQUErRTtBQUUvRSxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUM5QyxJQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUN4RCxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUloRDtJQUErQiw2QkFBVTtJQVlyQyxtQkFBb0IsSUFBVTtRQUE5QixZQUNJLGlCQUFPLFNBK0dWO1FBaEhtQixVQUFJLEdBQUosSUFBSSxDQUFNO1FBRjFCLHFCQUFlLEdBQWUsRUFBRSxDQUFDO1FBS2pDLEtBQUksQ0FBQyxTQUFTLEdBQWdCLEtBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWpFLEtBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSx5Q0FBYSxFQUFFLENBQUM7UUFFekMsS0FBSSxDQUFDLFVBQVUsR0FBRyxLQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV2RCxLQUFJLENBQUMsV0FBVyxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXpELEtBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxHQUFHLEtBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO1FBRW5FLEtBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO1FBRTVFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFN0IsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFD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QU0sQ0FBQztZQUNYLENBQUM7WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsS0FBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUMzRCxLQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxLQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztZQUM3RixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxFQUFFLFVBQUEsQ0FBQztZQUNBLEtBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUdNLDZCQUFTLEdBQWhCO1FBQ0ksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN6QixHQUFHLEVBQUUsdUNBQXVDO1lBQ25DLE1BQU0sRUFBRSxNQUFNO1lBQ2QsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFO1lBQy9DLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ3pDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFHTCxnQkFBQztBQUFELENBQUMsQUF0VkQsQ0FBK0IsdUJBQVUsR0FzVnhDO0FBdFZZLDhCQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbU9iamVjdCB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UnO1xuaW1wb3J0ICogYXMgYXBwIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uXCI7XG5pbXBvcnQgeyBMb2NhbFZpZGVvLCBWaWRlb0FjdGl2aXR5LCBSZW1vdGVWaWRlbyB9IGZyb20gJ25hdGl2ZXNjcmlwdC10d2lsaW8tdmlkZW8nO1xuaW1wb3J0ICogYXMgZGlhbG9ncyBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9kaWFsb2dzXCI7XG5pbXBvcnQgeyBTdGFja0xheW91dCB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9zdGFjay1sYXlvdXQvc3RhY2stbGF5b3V0JztcbmltcG9ydCB7IEdyaWRMYXlvdXQsIEl0ZW1TcGVjIH0gZnJvbSAndG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2dyaWQtbGF5b3V0JztcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL2h0dHBcIik7XG5jb25zdCBwZXJtaXNzaW9ucyA9IHJlcXVpcmUoJ25hdGl2ZXNjcmlwdC1wZXJtaXNzaW9ucycpO1xuY29uc3QgdGltZXIgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy90aW1lclwiKTtcblxuXG5cbmV4cG9ydCBjbGFzcyBWaWRlb0NoYXQgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgICBcbiAgICBwdWJsaWMgY29udGFpbmVyOiBhbnk7XG4gICAgcHVibGljIGxvY2FsVmlkZW86IGFueTtcbiAgICBwdWJsaWMgcmVtb3RlVmlkZW86IGFueTtcbiAgICBwdWJsaWMgYWNjZXNzVG9rZW46IHN0cmluZztcbiAgICBwdWJsaWMgcm9vbTogc3RyaW5nO1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIGVycm9yOiBzdHJpbmc7XG4gICAgcHVibGljIHZpZGVvQWN0aXZpdHk6IFZpZGVvQWN0aXZpdHk7XG5cdHB1YmxpYyBuYW1lRXZlbnRzQXJyYXk6IEFycmF5PGFueT4gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFnZTogUGFnZSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gPFN0YWNrTGF5b3V0PnRoaXMucGFnZS5nZXRWaWV3QnlJZCgnY29udGFpbmVyJyk7XG5cbiAgICAgICAgdGhpcy52aWRlb0FjdGl2aXR5ID0gbmV3IFZpZGVvQWN0aXZpdHkoKTtcblxuICAgICAgICB0aGlzLmxvY2FsVmlkZW8gPSB0aGlzLnBhZ2UuZ2V0Vmlld0J5SWQoJ2xvY2FsLXZpZGVvJyk7XG5cbiAgICAgICAgdGhpcy5yZW1vdGVWaWRlbyA9IHRoaXMucGFnZS5nZXRWaWV3QnlJZCgncmVtb3RlLXZpZGVvJyk7XG5cbiAgICAgICAgdGhpcy52aWRlb0FjdGl2aXR5LmxvY2FsVmlkZW9WaWV3ID0gdGhpcy5sb2NhbFZpZGVvLmxvY2FsVmlkZW9WaWV3O1xuXG4gICAgICAgIHRoaXMudmlkZW9BY3Rpdml0eS5yZW1vdGVWaWRlb1ZpZXcgPSB0aGlzLnJlbW90ZVZpZGVvLnJlbW90ZVZpZGVvVmlldztcblx0XHRcblx0XHRjb25zb2xlLmxvZygnaXMgb24gYW5kcm9pZCcpO1xuXG5cdFx0aWYgKGFwcC5hbmRyb2lkKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnaXMgb24gYW5kcm9pZCcpO1xuXHRcdFx0dGhpcy5zZXQoJ25hbWUnLCAnYW5kcm9pZCcpXG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2V0KCduYW1lJywgJ2lvcycpXG5cdFx0XHQvLyB0aGlzLm5hbWUgPSAnaW9zJ1xuXHRcdH1cblxuXHRcdHRoaXMucm9vbSA9ICd0ZXN0aW5nLXJvb20nO1xuXG4gICAgICAgIC8vIHRoaXMuYWRkX3ZpZGVvX3ZpZXdzKCk7XG5cbiAgICAgICAgdGhpcy52aWRlb0FjdGl2aXR5LmV2ZW50Lm9uKCdlcnJvcicsIChyZWFzb24pID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdiaWcgZXJyb3InKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlYXNvbi5vYmplY3RbJ3JlYXNvbiddKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0KFwiZXJyb3JcIiwgcmVhc29uLm9iamVjdFsncmVhc29uJ10pO1xuXHRcdFx0dGhpcy5uYW1lRXZlbnRzQXJyYXkucHVzaCh7IHRpdGxlOiByZWFzb24ub2JqZWN0WydyZWFzb24nXS50b1N0cmluZygpfSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlYXNvbi5vYmplY3RbJ3JlYXNvbiddKSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgdGhpcy52aWRlb0FjdGl2aXR5LmV2ZW50Lm9uKCdkaWRDb25uZWN0VG9Sb29tJywgKHIpID0+IHtcbiAgICAgICAgICAgIC8vIGlmIChyLm9iamVjdFsnY291bnQnXSA8IDEpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGlkQ29ubmVjdFRvUm9vbVwiKTtcbiAgICAgICAgICAgIC8vIHRoaXMudG9nZ2xlX2xvY2FsX3ZpZGVvX3NpemUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy52aWRlb0FjdGl2aXR5LmV2ZW50Lm9uKCdkaWRGYWlsVG9Db25uZWN0V2l0aEVycm9yJywgKHIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGlkRmFpbFRvQ29ubmVjdFdpdGhFcnJvclwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy52aWRlb0FjdGl2aXR5LmV2ZW50Lm9uKCdwYXJ0aWNpcGFudERpZENvbm5lY3QnLCAocikgPT4ge1xuICAgICAgICAgICAgLy8gaWYgKHIub2JqZWN0Wydjb3VudCddIDwgMSkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwYXJ0aWNpcGFudERpZENvbm5lY3RcIik7XG4gICAgICAgICAgICAvLyB0aGlzLnRvZ2dsZV9sb2NhbF92aWRlb19zaXplKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmlkZW9BY3Rpdml0eS5ldmVudC5vbigncGFydGljaXBhbnREaWREaXNjb25uZWN0JywgKHIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGFydGljaXBhbnREaWREaXNjb25uZWN0XCIpO1xuICAgICAgICAgICAgLy8gdGhpcy50b2dnbGVfbG9jYWxfdmlkZW9fc2l6ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkuZXZlbnQub24oJ3BhcnRpY2lwYW50VW5wdWJsaXNoZWRBdWRpb1RyYWNrJywgKHIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGFydGljaXBhbnRVbnB1Ymxpc2hlZEF1ZGlvVHJhY2tcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmlkZW9BY3Rpdml0eS5ldmVudC5vbigncGFydGljaXBhbnRQdWJsaXNoZWRWaWRlb1RyYWNrJywgKHIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGFydGljaXBhbnRQdWJsaXNoZWRWaWRlb1RyYWNrXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkuZXZlbnQub24oJ3BhcnRpY2lwYW50VW5wdWJsaXNoZWRWaWRlb1RyYWNrJywgKHIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGFydGljaXBhbnRVbnB1Ymxpc2hlZFZpZGVvVHJhY2tcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmlkZW9BY3Rpdml0eS5ldmVudC5vbignb25BdWRpb1RyYWNrU3Vic2NyaWJlZCcsIChyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9uQXVkaW9UcmFja1N1YnNjcmliZWRcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmlkZW9BY3Rpdml0eS5ldmVudC5vbignb25BdWRpb1RyYWNrVW5zdWJzY3JpYmVkJywgKHIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwib25BdWRpb1RyYWNrVW5zdWJzY3JpYmVkXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkuZXZlbnQub24oJ29uVmlkZW9UcmFja1N1YnNjcmliZWQnLCAocikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJvblZpZGVvVHJhY2tTdWJzY3JpYmVkXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkuZXZlbnQub24oJ29uVmlkZW9UcmFja1Vuc3Vic2NyaWJlZCcsIChyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9uVmlkZW9UcmFja1Vuc3Vic2NyaWJlZCAwMFwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy52aWRlb0FjdGl2aXR5LmV2ZW50Lm9uKCdwYXJ0aWNpcGFudERpc2FibGVkVmlkZW9UcmFjaycsIChyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInBhcnRpY2lwYW50RGlzYWJsZWRWaWRlb1RyYWNrXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkuZXZlbnQub24oJ3BhcnRpY2lwYW50RW5hYmxlZFZpZGVvVHJhY2snLCAocikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwYXJ0aWNpcGFudEVuYWJsZWRWaWRlb1RyYWNrXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkuZXZlbnQub24oJ3BhcnRpY2lwYW50RGlzYWJsZWRBdWRpb1RyYWNrJywgKHIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGFydGljaXBhbnREaXNhYmxlZEF1ZGlvVHJhY2tcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmlkZW9BY3Rpdml0eS5ldmVudC5vbigncGFydGljaXBhbnRFbmFibGVkQXVkaW9UcmFjaycsIChyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInBhcnRpY2lwYW50RW5hYmxlZEF1ZGlvVHJhY2tcIik7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgdGhpcy5nZXRfcGVybWlzc2lvbnMoKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGkgZmluZCB0aGUgc2V0dGltZW91dCBhbGxvd3MgZm9yIGEgc21vb3RoZXIgbG9hZCBpZiB5b3UncmUgbG9va2luZyBmb3IgdGhlIHByZXZpZXcgdG8gYmVnaW4gaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHRpbWVyLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkuc3RhcnRfcHJldmlldygpO1xuICAgICAgICAgICAgICAgICAgICB0aW1lci5jbGVhclRpbWVvdXQodCk7XG4gICAgICAgICAgICAgICAgfSwgMTIwMClcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRvZ2dsZV9sb2NhbF92aWRlb19zaXplKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5sb2NhbFZpZGVvLmNsYXNzTmFtZSA9PT0gJ2xhcmdlJykge1xuICAgICAgICAgICAgdGhpcy5sb2NhbFZpZGVvLmNsYXNzTmFtZSA9ICdzbWFsbCc7XG4gICAgICAgICAgICBHcmlkTGF5b3V0LnNldENvbHVtbih0aGlzLmxvY2FsVmlkZW8sIDEpO1xuICAgICAgICAgICAgR3JpZExheW91dC5zZXRSb3codGhpcy5sb2NhbFZpZGVvLCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxWaWRlby5jbGFzc05hbWUgPSAnbGFyZ2UnO1xuICAgICAgICAgICAgR3JpZExheW91dC5zZXRDb2x1bW4odGhpcy5sb2NhbFZpZGVvLCAwKTtcbiAgICAgICAgICAgIEdyaWRMYXlvdXQuc2V0Q29sdW1uU3Bhbih0aGlzLmxvY2FsVmlkZW8sIDIpO1xuICAgICAgICAgICAgR3JpZExheW91dC5zZXRSb3dTcGFuKHRoaXMubG9jYWxWaWRlbywgMik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRfdmlkZW9fdmlld3MoKTogdm9pZCB7XG4gICAgICAgIC8vIHRoaXMubG9jYWxWaWRlby5pZCA9ICdsb2NhbC12aWRlbyc7XG4gICAgICAgIHRoaXMubG9jYWxWaWRlby5jbGFzc05hbWUgPSAnbGFyZ2UnO1xuICAgICAgICB0aGlzLnJlbW90ZVZpZGVvLmlkID0gJ3JlbW90ZS12aWRlbyc7XG5cbiAgICAgICAgdGhpcy5sb2NhbFZpZGVvLm9uKCd0YXAnLCB0aGlzLnRvZ2dsZV9sb2NhbF92aWRlb19zaXplLmJpbmQodGhpcykpO1xuXG4gICAgICAgIEdyaWRMYXlvdXQuc2V0Q29sdW1uU3Bhbih0aGlzLnJlbW90ZVZpZGVvLCAyKTtcbiAgICAgICAgR3JpZExheW91dC5zZXRSb3dTcGFuKHRoaXMucmVtb3RlVmlkZW8sIDIpO1xuICAgICAgICBHcmlkTGF5b3V0LnNldFJvdyh0aGlzLnJlbW90ZVZpZGVvLCAwKTtcbiAgICAgICAgR3JpZExheW91dC5zZXRDb2x1bW5TcGFuKHRoaXMubG9jYWxWaWRlbywgMik7XG4gICAgICAgIEdyaWRMYXlvdXQuc2V0Um93U3Bhbih0aGlzLmxvY2FsVmlkZW8sIDIpO1xuICAgICAgICBHcmlkTGF5b3V0LnNldFJvdyh0aGlzLmxvY2FsVmlkZW8sIDApO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5pbnNlcnRDaGlsZCh0aGlzLnJlbW90ZVZpZGVvLCAwKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuaW5zZXJ0Q2hpbGQodGhpcy5sb2NhbFZpZGVvLCAwKTtcbiAgICB9XG5cblxuXG4gICAgY2hlY2tfcGVybWlzc2lvbnMoKTogYm9vbGVhbiB7XG4gICAgICAgIHZhciBhdWRpbywgY2FtZXJhO1xuXG4gICAgICAgIGlmIChhcHAuYW5kcm9pZCkge1xuICAgICAgICAgICAgYXVkaW8gPSBwZXJtaXNzaW9ucy5oYXNQZXJtaXNzaW9uKFwiYW5kcm9pZC5wZXJtaXNzaW9uLlJFQ09SRF9BVURJT1wiKVxuICAgICAgICAgICAgY2FtZXJhID0gcGVybWlzc2lvbnMuaGFzUGVybWlzc2lvbihcImFuZHJvaWQucGVybWlzc2lvbi5DQU1FUkFcIilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbWVyYSA9IEFWQ2FwdHVyZURldmljZS5hdXRob3JpemF0aW9uU3RhdHVzRm9yTWVkaWFUeXBlKEFWTWVkaWFUeXBlVmlkZW8pO1xuICAgICAgICAgICAgYXVkaW8gPSBBVkNhcHR1cmVEZXZpY2UuYXV0aG9yaXphdGlvblN0YXR1c0Zvck1lZGlhVHlwZShBVk1lZGlhVHlwZUF1ZGlvKTtcbiAgICAgICAgICAgIGlmIChjYW1lcmEgPCAzKSBjYW1lcmEgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChhdWRpbyA8IDMpIGF1ZGlvID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWF1ZGlvIHx8ICFjYW1lcmEpIHJldHVybiBmYWxzZTtcbiAgICAgICAgZWxzZSByZXR1cm4gdHJ1ZTtcblxuICAgIH1cblxuICAgIGdldF9wZXJtaXNzaW9ucygpOiBQcm9taXNlPGFueT4ge1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIHZhciBoYXNfcGVybWlzc2lvbnMgPSB0aGlzLmNoZWNrX3Blcm1pc3Npb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChoYXNfcGVybWlzc2lvbnMpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXBwLmFuZHJvaWQpIHtcbiAgICAgICAgICAgICAgICBwZXJtaXNzaW9ucy5yZXF1ZXN0UGVybWlzc2lvbnMoW1xuICAgICAgICAgICAgICAgICAgICBcImFuZHJvaWQucGVybWlzc2lvbi5SRUNPUkRfQVVESU9cIixcbiAgICAgICAgICAgICAgICAgICAgXCJhbmRyb2lkLnBlcm1pc3Npb24uQ0FNRVJBXCJcbiAgICAgICAgICAgICAgICBdLCBcIkkgbmVlZCB0aGVzZSBwZXJtaXNzaW9ucyBiZWNhdXNlIEknbSBjb29sXCIpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kaXIocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kaXIoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVoIG9oLCBubyBwZXJtaXNzaW9ucyAtIHBsYW4gQiB0aW1lIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNfcGVybWlzc2lvbnMgPSB0aGlzLmNoZWNrX3Blcm1pc3Npb25zKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzX3Blcm1pc3Npb25zKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dzLmFsZXJ0KFwid2l0aG91dCBtaWMgYW5kIGNhbWVyYSBwZXJtaXNzaW9ucyBcXG4geW91IGNhbm5vdCBjb25uZWN0LiBcXG4gcGxlYXNlIGFsbG93IHBlcm1pc3Npb25zIGluIHNldHRpbmdzIGFuZCB0cnkgYWdhaW4uXCIpLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChbdGhpcy5pb3NfbWljX3Blcm1pc3Npb24oKSwgdGhpcy5pb3NfY2FtZXJhX3Blcm1pc3Npb24oKV0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHZhbHVlcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh2YWx1ZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgcmVhc29uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlYXNvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoJ2Vycm9yJywgcmVhc29uKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9ncy5hbGVydChcIndpdGhvdXQgbWljIGFuZCBjYW1lcmEgcGVybWlzc2lvbnMgXFxuIHlvdSBjYW5ub3QgY29ubmVjdC4gXFxuIHBsZWFzZSBhbGxvdyBwZXJtaXNzaW9ucyBpbiBzZXR0aW5ncyBhbmQgdHJ5IGFnYWluLlwiKS50aGVuKCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJQXBwbGljYXRpb24uc2hhcmVkQXBwbGljYXRpb24ub3BlblVSTChOU1VSTC5VUkxXaXRoU3RyaW5nKFVJQXBwbGljYXRpb25PcGVuU2V0dGluZ3NVUkxTdHJpbmcpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpXG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuXG4gICAgfVxuXG4gICAgaW9zX21pY19wZXJtaXNzaW9uKCk6IFByb21pc2U8YW55PiB7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICAgICAgdmFyIGhhc19hc2tlZCA9IEFWQ2FwdHVyZURldmljZS5hdXRob3JpemF0aW9uU3RhdHVzRm9yTWVkaWFUeXBlKEFWTWVkaWFUeXBlQXVkaW8pO1xuXG4gICAgICAgICAgICBpZiAoaGFzX2Fza2VkID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdtaWMgcGVybWlzc2lvbiBkZW5pZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEFWQXVkaW9TZXNzaW9uLnNoYXJlZEluc3RhbmNlKCkucmVxdWVzdFJlY29yZFBlcm1pc3Npb24oKGJvb2wpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYm9vbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGJvb2wpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlamVjdCgnbWljIHBlcm1pc3Npb24gZGVuaWVkJyk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pXG5cbiAgICB9XG5cbiAgICBpb3NfY2FtZXJhX3Blcm1pc3Npb24oKTogUHJvbWlzZTxhbnk+IHtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICB2YXIgaGFzX2Fza2VkID0gQVZDYXB0dXJlRGV2aWNlLmF1dGhvcml6YXRpb25TdGF0dXNGb3JNZWRpYVR5cGUoQVZNZWRpYVR5cGVWaWRlbyk7XG5cbiAgICAgICAgICAgIGlmIChoYXNfYXNrZWQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ2NhbWVyYSBwZXJtaXNzaW9uIGRlbmllZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQVZDYXB0dXJlRGV2aWNlLnJlcXVlc3RBY2Nlc3NGb3JNZWRpYVR5cGVDb21wbGV0aW9uSGFuZGxlcihBVk1lZGlhVHlwZVZpZGVvLCAoYm9vbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChib29sID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYm9vbCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdjYW1lcmEgcGVybWlzc2lvbiBkZW5pZWQnKTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIHB1YmxpYyBkaXNjb25uZWN0KCkge1xuXHRcdGNvbnNvbGUubG9nKCdkaWNvbm5lY3QnKTtcblx0XHRjb25zb2xlLmxvZyh0aGlzLnZpZGVvQWN0aXZpdHkucm9vbSk7XG4gICAgICAgIGlmICh0aGlzLnZpZGVvQWN0aXZpdHkucm9vbSkge1xuXG4gICAgICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkuZGlzY29ubmVjdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgcHVibGljIHRvZ2dsZV9sb2NhbF9hdWRpbygpIHtcblxuICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkudG9nZ2xlX2xvY2FsX2F1ZGlvKCk7XG5cbiAgICB9XG5cblxuICAgIHB1YmxpYyB0b2dnbGVfbG9jYWxfdmlkZW8oKSB7XG5cbiAgICAgICAgdGhpcy52aWRlb0FjdGl2aXR5LnRvZ2dsZV9sb2NhbF92aWRlbygpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIGNvbm5lY3RfdG9fcm9vbSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmdldCgnbmFtZScpIHx8ICF0aGlzLmdldCgncm9vbScpIHx8IHRoaXMuZ2V0KCduYW1lJykubGVuZ3RoIDwgMSB8fCB0aGlzLmdldCgncm9vbScpLmxlbmd0aCA8IDEpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXQoJ2Vycm9yJywgXCJNaXNzaW5nIEluZm8uXCIpO1xuICAgICAgICBlbHNlIHRoaXMuc2V0KCdlcnJvcicsIFwiXCIpO1xuICAgICAgICB0aGlzLmdldF90b2tlbigpXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSByZXN1bHQuY29udGVudC50b0pTT04oKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbJ21lc3NhZ2UnXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCgnZXJyb3InLCByZXN1bHRbJ21lc3NhZ2UnXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cdFx0XHRcdGNvbnNvbGUubG9nKHRoaXMudmlkZW9BY3Rpdml0eS5yb29tKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvQWN0aXZpdHkuc2V0X2FjY2Vzc190b2tlbihyZXN1bHRbJ3R3aWxpb1Rva2VuJ10pO1xuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9BY3Rpdml0eS5jb25uZWN0X3RvX3Jvb20odGhpcy5nZXQoJ3Jvb20nKSwge3ZpZGVvOiB0cnVlLCBhdWRpbzogdHJ1ZX0pO1xuXHRcdFx0XHRjb25zb2xlLmxvZyh0aGlzLnZpZGVvQWN0aXZpdHkucm9vbSk7XG4gICAgICAgICAgICB9LCBlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldCgnZXJyb3InLCBlKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgcHVibGljIGdldF90b2tlbigpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBsZXQgbmFtZSA9IHRoaXMuZ2V0KCduYW1lJylcbiAgICAgICAgcmV0dXJuIGh0dHAucmVxdWVzdCh7XG5cdFx0XHR1cmw6ICdodHRwczovLzllODI4ZDZlLm5ncm9rLmlvL3R3aWxpb1Rva2VuJyxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgICAgICBjb250ZW50OiBKU09OLnN0cmluZ2lmeSh7IHVpZDogbmFtZSB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cblxufSJdfQ==