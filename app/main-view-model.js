"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var app = require("tns-core-modules/application");
var nativescript_twilio_video_1 = require("nativescript-twilio-video");
var dialogs = require("ui/dialogs");
var http = require("http");
var permissions = require('nativescript-permissions');
var timer = require("timer");
var HelloWorldModel = (function (_super) {
    __extends(HelloWorldModel, _super);
    function HelloWorldModel(page) {
        var _this = _super.call(this) || this;
        _this.page = page;
        _this.countdown = 60;
        var container = _this.page.getViewById('s');
        _this.videoActivity = new nativescript_twilio_video_1.VideoActivity();
        _this.localVideo = new nativescript_twilio_video_1.LocalVideo();
        _this.remoteVideo = new nativescript_twilio_video_1.RemoteVideo();
        _this.localVideo.className = 'box';
        _this.remoteVideo.className = 'box';
        container.insertChild(_this.localVideo, 0);
        container.insertChild(_this.remoteVideo, 1);
        _this.videoActivity.localVideoView = _this.localVideo.localVideoView;
        _this.videoActivity.remoteVideoView = _this.remoteVideo.remoteVideoView;
        _this.videoActivity.event.on('error', function (reason) {
            _this.set("error", reason.object['reason']);
            console.log(JSON.stringify(reason.object['reason']));
        });
        _this.videoActivity.event.on('didConnectToRoom', function (r) {
            if (r.object['count'] < 1)
                return;
            console.log("didConnectToRoom zz");
            console.log(JSON.stringify(r));
        });
        _this.videoActivity.event.on('didFailToConnectWithError', function (r) {
            console.log("didFailToConnectWithError");
        });
        _this.videoActivity.event.on('participantDidConnect', function (r) {
            if (r.object['count'] < 1)
                return;
            if (app.ios && container.getChildIndex(_this.remoteVideo) === -1) {
                console.log('adding view');
                _this.add_remote_view(container);
            }
            console.log(JSON.stringify(r));
            console.log("participantDidConnect");
        });
        _this.videoActivity.event.on('participantDidDisconnect', function (r) {
            if (app.ios) {
                container.removeChild(_this.remoteVideo);
            }
            console.log("participantDidDisconnect");
        });
        _this.videoActivity.event.on('onVideoTrackSubscribed', function (r) {
            console.log("onVideoTrackSubscribed 00");
            if (app.ios) {
                console.log(_this.videoActivity.videoTrack);
            }
        });
        _this.videoActivity.event.on('onVideoTrackUnsubscribed', function (r) {
            console.log("onVideoTrackUnsubscribed 00");
        });
        _this.videoActivity.event.on('participantDisabledVideoTrack', function (r) {
            console.log("participantDisabledVideoTrack");
        });
        _this.videoActivity.event.on('participantEnabledVideoTrack', function (r) {
            console.log("participantEnabledVideoTrack");
        });
        _this.videoActivity.event.on('participantDisabledAudioTrack', function (r) {
            console.log("participantDisabledAudioTrack");
        });
        _this.videoActivity.event.on('participantEnabledAudioTrack', function (r) {
            console.log("participantEnabledAudioTrack");
        });
        _this.getPermissions()
            .then(function () {
            var t = timer.setTimeout(function () {
                _this.videoActivity.startPreview();
                timer.clearTimeout(t);
            }, 1200);
        })
            .then(function () { return _this.getToken(); })
            .then(function (result) {
            var result = result.content.toJSON();
            _this.videoActivity.set_access_token(result['token']);
        });
        return _this;
    }
    HelloWorldModel.prototype.add_remote_view = function (c) {
        this.remoteVideo = new nativescript_twilio_video_1.RemoteVideo();
        this.videoActivity.remoteVideoView = this.remoteVideo.remoteVideoView;
        this.remoteVideo.className = 'box';
        c.insertChild(this.remoteVideo, 1);
    };
    HelloWorldModel.prototype.check_permissions = function () {
        var audio, camera;
        if (app.android) {
            audio = permissions.hasPermission("android.permission.RECORD_AUDIO");
            camera = permissions.hasPermission("android.permission.CAMERA");
        }
        else {
            camera = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo);
            audio = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeAudio);
            if (camera < 3)
                camera = false;
            if (audio < 3)
                audio = false;
        }
        if (!audio || !camera)
            return false;
        else
            return true;
    };
    HelloWorldModel.prototype.getPermissions = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var has_permissions = _this.check_permissions();
            if (has_permissions) {
                resolve();
                return;
            }
            if (app.android) {
                permissions.requestPermissions([
                    "android.permission.RECORD_AUDIO",
                    "android.permission.CAMERA"
                ], "I need these permissions because I'm cool")
                    .then(function (response) {
                    console.dir(response);
                    resolve(response);
                })
                    .catch(function (e) {
                    console.dir(e);
                    console.log("Uh oh, no permissions - plan B time!");
                    var has_permissions = _this.check_permissions();
                    if (!has_permissions) {
                        dialogs.alert("without mic and camera permissions \n you cannot meet potential matches through video chat. \n please allow permissions in settings and try again.").then(function () {
                        });
                    }
                });
            }
            else {
                Promise.all([_this.ios_mic_permission(), _this.ios_camera_permission()])
                    .then(function (values) {
                    console.log(JSON.stringify(values));
                    resolve();
                }, function (reason) {
                    console.log(JSON.stringify(reason));
                    _this.set('error', reason);
                    dialogs.alert("without mic and camera permissions \n you cannot meet potential matches through video chat. \n please allow permissions in settings and try again.").then(function () {
                        UIApplication.sharedApplication.openURL(NSURL.URLWithString(UIApplicationOpenSettingsURLString));
                    });
                    reject();
                });
            }
        });
    };
    HelloWorldModel.prototype.ios_mic_permission = function () {
        return new Promise(function (resolve, reject) {
            var has_asked = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeAudio);
            if (has_asked === 2) {
                reject('mic permission denied');
                return;
            }
            AVAudioSession.sharedInstance().requestRecordPermission(function (bool) {
                if (bool === true) {
                    resolve(bool);
                    return;
                }
                reject('mic permission denied');
            });
        });
    };
    HelloWorldModel.prototype.ios_camera_permission = function () {
        return new Promise(function (resolve, reject) {
            var has_asked = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo);
            if (has_asked === 2) {
                reject('camera permission denied');
                return;
            }
            AVCaptureDevice.requestAccessForMediaTypeCompletionHandler(AVMediaTypeVideo, function (bool) {
                if (bool === true) {
                    resolve(bool);
                    return;
                }
                reject('camera permission denied');
            });
        });
    };
    HelloWorldModel.prototype.disconnect = function () {
        if (this.videoActivity.room) {
            this.videoActivity.disconnect();
        }
    };
    HelloWorldModel.prototype.add_time = function () {
    };
    HelloWorldModel.prototype.toggle_local_audio = function () {
        this.videoActivity.toggle_local_audio();
    };
    HelloWorldModel.prototype.toggle_local_video = function () {
        this.videoActivity.toggle_local_video();
    };
    HelloWorldModel.prototype.connect_to_room = function () {
        var text = this.get('textfield');
        this.videoActivity.connect_to_room(text);
    };
    HelloWorldModel.prototype.getToken = function () {
        console.log('getToken');
        var user = {
            uid: ''
        };
        if (app.android) {
            user.uid = 'android';
        }
        else {
            user.uid = 'ios';
        }
        return http.request({
            url: "https://us-central1-firebase-goblur.cloudfunctions.net/get_token",
            method: "POST",
            headers: { "Content-Type": "application/json" },
            content: JSON.stringify(user)
        });
    };
    return HelloWorldModel;
}(observable_1.Observable));
exports.HelloWorldModel = HelloWorldModel;
//# sourceMappingURL=data:application/json;base64,