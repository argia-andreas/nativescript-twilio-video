"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var http = require("http");
var nativescript_twilio_video_1 = require("nativescript-twilio-video");
var timer = require("timer");
var permissions = require('nativescript-permissions');
var HelloWorldModel = (function (_super) {
    __extends(HelloWorldModel, _super);
    function HelloWorldModel(page) {
        var _this = _super.call(this) || this;
        _this.page = page;
        _this.videoActivity = new nativescript_twilio_video_1.VideoActivity();
        _this.getPermissions();
        _this.set('participant', 'wow');
        var self = _this;
        return _this;
    }
    HelloWorldModel.prototype.getPermissions = function () {
        permissions.requestPermissions([
            android.Manifest.permission.RECORD_AUDIO,
            android.Manifest.permission.CAMERA
        ], "I need these permissions because I'm cool")
            .then(function (response) {
        })
            .catch(function (e) {
            console.dir(e);
            console.log("Uh oh, no permissions - plan B time!");
        });
    };
    HelloWorldModel.prototype.show_local_video = function () {
        this.videoActivity.createAudioAndVideoTracks();
    };
    HelloWorldModel.prototype.toggle_local_video = function () {
        this.videoActivity.toggle_local_video();
    };
    HelloWorldModel.prototype.set_access_token = function (token, name) {
        this.videoActivity.set_access_token(token, name);
    };
    HelloWorldModel.prototype.connect_to_room = function (room) {
        this.videoActivity.connect_to_room('a');
    };
    return HelloWorldModel;
}(observable_1.Observable));
exports.HelloWorldModel = HelloWorldModel;
//# sourceMappingURL=data:application/json;base64,