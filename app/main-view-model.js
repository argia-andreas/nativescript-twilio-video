"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var app = require("tns-core-modules/application");
var nativescript_twilio_video_1 = require("nativescript-twilio-video");
var http = require("http");
var permissions = require('nativescript-permissions');
var HelloWorldModel = (function (_super) {
    __extends(HelloWorldModel, _super);
    function HelloWorldModel(page) {
        var _this = _super.call(this) || this;
        _this.page = page;
        _this.countdown = 60;
        _this.localVideo = _this.page.getViewById('local-video');
        _this.remoteVideo = _this.page.getViewById('remote-video');
        _this.videoActivity = new nativescript_twilio_video_1.VideoActivity();
        _this.videoActivity.localVideoView = _this.localVideo.localVideoView;
        _this.videoActivity.remoteVideoView = _this.remoteVideo.remoteVideoView;
        _this.videoActivity.createAudioAndVideoTracks();
        _this.getPermissions();
        _this.getToken()
            .then(function (result) {
            console.log('result');
            var result = result.content.toJSON();
            console.log(result['token']);
            _this.videoActivity.set_access_token(result['token']);
        });
        _this.videoActivity.events.on('onConnected', function (data) {
            var room = data.object['room'];
            console.log(room);
            _this.videoActivity.set_listener_for_participants(room);
        });
        _this.videoActivity.events.on('onParticipantConnected', function (data) {
            console.log('onParticipantConnected');
            var participant = data.object['participant'];
            var room = data.object['room'];
            _this.videoActivity.participant_joined_room(participant);
        });
        _this.videoActivity.events.on('onVideoTrackAdded', function (data) {
            console.log('onVideoTrackAdded');
            var videoTrack = data.object['videoTrack'];
            var participant = data.object['participant'];
            _this.videoActivity.add_video_track(videoTrack);
        });
        _this.videoActivity.events.on('onDisconnected', function (data) {
            var room = data.object['room'];
            var error = data.object['error'];
            console.log(error);
            _this.videoActivity.configure_audio(false);
            console.log('onDisconnected');
        });
        _this.videoActivity.events.on('onConnectFailure', function (data) {
            console.log(JSON.stringify(data));
            _this.videoActivity.configure_audio(false);
        });
        _this.videoActivity.events.on('onParticipantDisconnected', function (data) {
            console.log('onParticipantDisconnected');
            var participant = data.object['participant'];
            _this.videoActivity.removeParticipant(participant);
        });
        _this.videoActivity.events.on('onAudioTrackAdded', function (data) {
            console.log('onAudioTrackAdded');
        });
        _this.videoActivity.events.on('onAudioTrackRemoved', function (data) {
            console.log('onAudioTrackRemoved');
        });
        _this.videoActivity.events.on('onVideoTrackRemoved', function (data) {
            console.log('onVideoTrackRemoved');
        });
        _this.videoActivity.events.on('onAudioTrackEnabled', function (data) {
            console.log('onAudioTrackEnabled');
        });
        _this.videoActivity.events.on('onAudioTrackDisabled', function (data) {
            console.log('onAudioTrackDisabled');
        });
        _this.videoActivity.events.on('onVideoTrackEnabled', function (data) {
            console.log('onVideoTrackEnabled');
        });
        _this.videoActivity.events.on('onVideoTrackDisabled', function (data) {
            console.log('onVideoTrackDisabled');
        });
        return _this;
    }
    HelloWorldModel.prototype.getPermissions = function () {
        return new Promise(function (resolve, reject) {
            if (app.android) {
                permissions.requestPermissions([
                    "android.permission.RECORD_AUDIO",
                    "android.permission.CAMERA"
                ], "I need these permissions because I'm cool")
                    .then(function (response) {
                    console.dir(response);
                    resolve();
                })
                    .catch(function (e) {
                    console.dir(e);
                    console.log("Uh oh, no permissions - plan B time!");
                });
            }
            else {
                resolve();
            }
        });
    };
    HelloWorldModel.prototype.disconnect = function () {
        this.videoActivity.roomObj.disconnect();
    };
    HelloWorldModel.prototype.add_time = function () {
    };
    HelloWorldModel.prototype.show_local_video = function () {
        this.videoActivity.createAudioAndVideoTracks();
    };
    HelloWorldModel.prototype.toggle_local_audio = function () {
        this.videoActivity.toggle_local_audio();
    };
    HelloWorldModel.prototype.toggle_local_video = function () {
        this.videoActivity.toggle_local_video();
    };
    HelloWorldModel.prototype.connect_to_room = function () {
        this.videoActivity.connect_to_room('abc');
    };
    HelloWorldModel.prototype.getToken = function () {
        var user = {
            name: ''
        };
        if (app.android) {
            user.name = 'android';
        }
        else {
            user.name = 'ios';
        }
        return http.request({
            url: "https://us-central1-firebase-goblur.cloudfunctions.net/get_token",
            method: "POST",
            headers: { "Content-Type": "application/json" },
            content: JSON.stringify(user)
        });
    };
    return HelloWorldModel;
}(observable_1.Observable));
exports.HelloWorldModel = HelloWorldModel;
//# sourceMappingURL=data:application/json;base64,