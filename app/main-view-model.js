"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var http = require("http");
var nativescript_twilio_video_1 = require("nativescript-twilio-video");
var timer = require("timer");
var permissions = require('nativescript-permissions');
var RoomDelegate = (function (_super) {
    __extends(RoomDelegate, _super);
    function RoomDelegate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RoomDelegate.new = function () {
        return _super.new.call(this);
    };
    RoomDelegate.prototype.didConnectToRoom = function (room) {
        console.log('connected to a room');
        console.log(room);
    };
    RoomDelegate.prototype.didFailToConnectWithError = function (room, error) {
        console.log('didFailToConnectWithError');
        console.log(room);
    };
    RoomDelegate.prototype.didDisconnectWithError = function (room, error) {
        console.log('didDisconnectWithError');
        console.log(error);
        console.log(room);
    };
    ;
    RoomDelegate.prototype.participantDidConnect = function (room, participant) {
        console.log('participantDidConnect');
        console.log(room);
    };
    RoomDelegate.prototype.participantDidDisconnect = function (room, participant) {
        console.log('participantDidDisconnect');
        console.log(room);
    };
    RoomDelegate.prototype.roomDidStartRecording = function (room) {
        console.log('roomDidStartRecording');
    };
    RoomDelegate.prototype.roomDidStopRecording = function (room) {
        console.log('roomDidStopRecording');
    };
    return RoomDelegate;
}(NSObject));
RoomDelegate.ObjCProtocols = [TVIRoomDelegate];
var HelloWorldModel = (function (_super) {
    __extends(HelloWorldModel, _super);
    function HelloWorldModel(page) {
        var _this = _super.call(this) || this;
        _this.page = page;
        _this.token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImN0eSI6InR3aWxpby1mcGE7dj0xIn0.eyJqdGkiOiJTSzNjMmE5OTI1Yjg4NTUwODg1ZDhjZDJmNzMwYWNlMTZmLTE0OTc4MzE2ODkiLCJpc3MiOiJTSzNjMmE5OTI1Yjg4NTUwODg1ZDhjZDJmNzMwYWNlMTZmIiwic3ViIjoiQUM5NjFhZjMzYmUyZDI2OWIzZTM2NThiNjJlNWU1ZDU1OCIsImV4cCI6MTQ5NzgzNTI4OSwiZ3JhbnRzIjp7ImlkZW50aXR5IjoidyIsInZpZGVvIjp7InJvb20iOiJlIn19fQ.0PjYE2Dt3-3VlRi-EErMsmG44ACr313j4603O8X5AjU';
        _this.countdown = 60;
        var delegate = RoomDelegate.new();
        var connectOptions = TVIConnectOptions.optionsWithBlock(function (builder) {
            builder.name = 'crazy';
            return builder;
        });
        var videoClient = TVIVideoClient.clientWithToken(_this.token);
        _this.room = videoClient.connectWithOptionsDelegate(connectOptions, delegate);
        console.dir(_this.room);
        var self = _this;
        _this.videoActivity = new nativescript_twilio_video_1.VideoActivity();
        return _this;
    }
    HelloWorldModel.prototype.getPermissions = function () {
        permissions.requestPermissions([
            android.Manifest.permission.RECORD_AUDIO,
            android.Manifest.permission.CAMERA
        ], "I need these permissions because I'm cool")
            .then(function (response) {
        })
            .catch(function (e) {
            console.dir(e);
            console.log("Uh oh, no permissions - plan B time!");
        });
    };
    HelloWorldModel.prototype.disconnect = function () {
        console.log('clicked');
        console.log(this.room);
        this.room.disconnect();
    };
    HelloWorldModel.prototype.add_time = function () {
        console.dir(this.room);
    };
    HelloWorldModel.prototype.show_local_video = function () {
    };
    HelloWorldModel.prototype.set_access_token = function (token, name) {
    };
    HelloWorldModel.prototype.connect_to_room = function (room) {
        console.dir(this.room);
    };
    return HelloWorldModel;
}(observable_1.Observable));
exports.HelloWorldModel = HelloWorldModel;
//# sourceMappingURL=data:application/json;base64,