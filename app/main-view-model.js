"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var app = require("tns-core-modules/application");
var nativescript_twilio_video_1 = require("nativescript-twilio-video");
var dialogs = require("ui/dialogs");
var grid_layout_1 = require("ui/layouts/grid-layout");
var http = require("http");
var permissions = require('nativescript-permissions');
var timer = require("timer");
var VideoChat = (function (_super) {
    __extends(VideoChat, _super);
    function VideoChat(page) {
        var _this = _super.call(this) || this;
        _this.page = page;
        _this.container = _this.page.getViewById('container');
        _this.videoActivity = new nativescript_twilio_video_1.VideoActivity();
        _this.localVideo = new nativescript_twilio_video_1.LocalVideo();
        _this.remoteVideo = new nativescript_twilio_video_1.RemoteVideo();
        _this.videoActivity.localVideoView = _this.localVideo.localVideoView;
        _this.videoActivity.remoteVideoView = _this.remoteVideo.remoteVideoView;
        _this.add_video_views();
        _this.videoActivity.event.on('error', function (reason) {
            _this.set("error", reason.object['reason']);
            console.log(JSON.stringify(reason.object['reason']));
        });
        _this.videoActivity.event.on('didConnectToRoom', function (r) {
            if (r.object['count'] < 1)
                return;
            console.log("didConnectToRoom");
            _this.toggle_local_video_size();
        });
        _this.videoActivity.event.on('didFailToConnectWithError', function (r) {
            console.log("didFailToConnectWithError");
        });
        _this.videoActivity.event.on('participantDidConnect', function (r) {
            if (r.object['count'] < 1)
                return;
            console.log("participantDidConnect");
            _this.toggle_local_video_size();
        });
        _this.videoActivity.event.on('participantDidDisconnect', function (r) {
            console.log("participantDidDisconnect");
            _this.toggle_local_video_size();
        });
        _this.videoActivity.event.on('participantUnpublishedAudioTrack', function (r) {
            console.log("participantUnpublishedAudioTrack");
        });
        _this.videoActivity.event.on('participantPublishedVideoTrack', function (r) {
            console.log("participantPublishedVideoTrack");
        });
        _this.videoActivity.event.on('participantUnpublishedVideoTrack', function (r) {
            console.log("participantUnpublishedVideoTrack");
        });
        _this.videoActivity.event.on('onAudioTrackSubscribed', function (r) {
            console.log("onAudioTrackSubscribed");
        });
        _this.videoActivity.event.on('onAudioTrackUnsubscribed', function (r) {
            console.log("onAudioTrackUnsubscribed");
        });
        _this.videoActivity.event.on('onVideoTrackSubscribed', function (r) {
            console.log("onVideoTrackSubscribed");
        });
        _this.videoActivity.event.on('onVideoTrackUnsubscribed', function (r) {
            console.log("onVideoTrackUnsubscribed 00");
        });
        _this.videoActivity.event.on('participantDisabledVideoTrack', function (r) {
            console.log("participantDisabledVideoTrack");
        });
        _this.videoActivity.event.on('participantEnabledVideoTrack', function (r) {
            console.log("participantEnabledVideoTrack");
        });
        _this.videoActivity.event.on('participantDisabledAudioTrack', function (r) {
            console.log("participantDisabledAudioTrack");
        });
        _this.videoActivity.event.on('participantEnabledAudioTrack', function (r) {
            console.log("participantEnabledAudioTrack");
        });
        _this.get_permissions()
            .then(function () {
            var t = timer.setTimeout(function () {
                _this.videoActivity.startPreview();
                timer.clearTimeout(t);
            }, 1200);
        });
        return _this;
    }
    VideoChat.prototype.toggle_local_video_size = function () {
        if (this.localVideo.className === 'large') {
            this.localVideo.className = 'small';
            grid_layout_1.GridLayout.setColumn(this.localVideo, 1);
            grid_layout_1.GridLayout.setRow(this.localVideo, 0);
        }
        else {
            this.localVideo.className = 'large';
            grid_layout_1.GridLayout.setColumn(this.localVideo, 0);
            grid_layout_1.GridLayout.setColumnSpan(this.localVideo, 2);
            grid_layout_1.GridLayout.setRowSpan(this.localVideo, 2);
        }
    };
    VideoChat.prototype.add_video_views = function () {
        this.localVideo.className = 'large';
        this.remoteVideo.id = 'remote-video';
        this.localVideo.on('tap', this.toggle_local_video_size.bind(this));
        grid_layout_1.GridLayout.setColumnSpan(this.remoteVideo, 2);
        grid_layout_1.GridLayout.setRowSpan(this.remoteVideo, 2);
        grid_layout_1.GridLayout.setRow(this.remoteVideo, 0);
        grid_layout_1.GridLayout.setColumnSpan(this.localVideo, 2);
        grid_layout_1.GridLayout.setRowSpan(this.localVideo, 2);
        grid_layout_1.GridLayout.setRow(this.localVideo, 0);
        this.container.insertChild(this.remoteVideo, 0);
        this.container.insertChild(this.localVideo, 0);
    };
    VideoChat.prototype.check_permissions = function () {
        var audio, camera;
        if (app.android) {
            audio = permissions.hasPermission("android.permission.RECORD_AUDIO");
            camera = permissions.hasPermission("android.permission.CAMERA");
        }
        else {
            camera = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo);
            audio = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeAudio);
            if (camera < 3)
                camera = false;
            if (audio < 3)
                audio = false;
        }
        if (!audio || !camera)
            return false;
        else
            return true;
    };
    VideoChat.prototype.get_permissions = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var has_permissions = _this.check_permissions();
            if (has_permissions) {
                resolve();
                return;
            }
            if (app.android) {
                permissions.requestPermissions([
                    "android.permission.RECORD_AUDIO",
                    "android.permission.CAMERA"
                ], "I need these permissions because I'm cool")
                    .then(function (response) {
                    console.dir(response);
                    resolve(response);
                })
                    .catch(function (e) {
                    console.dir(e);
                    console.log("Uh oh, no permissions - plan B time!");
                    var has_permissions = _this.check_permissions();
                    if (!has_permissions) {
                        dialogs.alert("without mic and camera permissions \n you cannot connect. \n please allow permissions in settings and try again.").then(function () {
                        });
                    }
                });
            }
            else {
                Promise.all([_this.ios_mic_permission(), _this.ios_camera_permission()])
                    .then(function (values) {
                    console.log(JSON.stringify(values));
                    resolve();
                }, function (reason) {
                    console.log(JSON.stringify(reason));
                    _this.set('error', reason);
                    dialogs.alert("without mic and camera permissions \n you cannot connect. \n please allow permissions in settings and try again.").then(function () {
                        UIApplication.sharedApplication.openURL(NSURL.URLWithString(UIApplicationOpenSettingsURLString));
                    });
                    reject();
                });
            }
        });
    };
    VideoChat.prototype.ios_mic_permission = function () {
        return new Promise(function (resolve, reject) {
            var has_asked = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeAudio);
            if (has_asked === 2) {
                reject('mic permission denied');
                return;
            }
            AVAudioSession.sharedInstance().requestRecordPermission(function (bool) {
                if (bool === true) {
                    resolve(bool);
                    return;
                }
                reject('mic permission denied');
            });
        });
    };
    VideoChat.prototype.ios_camera_permission = function () {
        return new Promise(function (resolve, reject) {
            var has_asked = AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo);
            if (has_asked === 2) {
                reject('camera permission denied');
                return;
            }
            AVCaptureDevice.requestAccessForMediaTypeCompletionHandler(AVMediaTypeVideo, function (bool) {
                if (bool === true) {
                    resolve(bool);
                    return;
                }
                reject('camera permission denied');
            });
        });
    };
    VideoChat.prototype.disconnect = function () {
        if (this.videoActivity.room) {
            this.videoActivity.disconnect();
        }
    };
    VideoChat.prototype.toggle_local_audio = function () {
        this.videoActivity.toggle_local_audio();
    };
    VideoChat.prototype.toggle_local_video = function () {
        this.videoActivity.toggle_local_video();
    };
    VideoChat.prototype.connect_to_room = function () {
        var _this = this;
        if (!this.get('name') || !this.get('room') || this.get('name').length < 1 || this.get('room').length < 1)
            return this.set('error', "Missing Info.");
        else
            this.set('error', "");
        this.get_token()
            .then(function (result) {
            var result = result.content.toJSON();
            _this.videoActivity.set_access_token(result['token']);
            _this.videoActivity.connect_to_room(_this.get('room'), { video: true, audio: true });
        }, function (e) {
            _this.set('error', e);
        });
    };
    VideoChat.prototype.get_token = function () {
        var name = this.get('name');
        return http.request({
            url: "url",
            method: "POST",
            headers: { "Content-Type": "application/json" },
            content: JSON.stringify({ uid: name })
        });
    };
    return VideoChat;
}(observable_1.Observable));
exports.VideoChat = VideoChat;
//# sourceMappingURL=data:application/json;base64,